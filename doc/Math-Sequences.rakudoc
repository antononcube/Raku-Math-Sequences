=begin pod

=head1 NAME

Math::Sequences - Various mathematical sequences of moderate use

=head1 SYNOPSIS

=begin code :lang<raku>

use Math::Sequences::Integer;  # You have to include one ...
use Math::Sequences::Real;     # ... or the other

say factorial(33);    # from  Math::Sequences::Integer;
say sigma( 8 );
say FatPi;

say ‚Ñù.gist();         # from  Math::Sequences::Real;
say ‚Ñù.from(pi)[0]

=end code

=head1 DESCRIPTION

C<Math::Sequences> is a module with integer and floating point
sequences and some helper modules.

=head1 INCLUDED COMPONENTS

=head2 Math::Sequences::Integer

Integer sequences

=head3 class Integers

Generic Integer sequences class

=head3 class Naturals

More specific finite-starting-point class

=head3 ‚Ñ§

The integers as a range

=head3 ùïÄ

The naturals (from 0) as a range

=head3 ‚Ñï

The naturals (from 1) as a range

=head3 @AXXXXXX

All of the core OEIS sequences from
L<https://oeis.org/wiki/Index_to_OEIS:_Section_Cor>

=head3 %oeis-core

A mapping of English names to sequences (e.g. C<%oeis-core<primes>>.

=head3 OEIS

A function that returns the sequence for a given name, but can also
search for sequences (C<.search> flag) whose names start with the given
string, in which case a hash of name/sequence pairs is returned. Names
can be the C<%oeis-core> aliases or the OEIS key such as C<A000001>.

=head2 Math::Sequences::Real

Real sequences

=head3 C<class Reals>

Generic Real number sequences class

=head3 ‚Ñù

The reals as a range

=head2 Math::Sequences::Numberphile

OEIS sequences featured on the
L<Numberphile YouTube channel|https://youtube.com/numberphile>.

=head3 @AXXXXXX

As with C<Math::Sequences::Integer>. these are exported by
default and contain the sequence of values for that OEIS entry.
They include:

=begin output

A001220 A002210 A002904 A006567 A006933 A010727 A023811
A058883 A087019 A087409 A125523 A125524 A131645 A181391
A232448 A249572 A316667

=end output

=head3 topologically-ordered-numbers(:@ordering=[<1 4 8>], :$radix=10)

A generator for "holey" numbers.

=head3 digit-grouped-multiples(:$of, :$group=2)

A generator for sequences of numbers that are generated by taking the
multiplication table for the given C<:$of> value and grouping the
resulting digits in groups of C<:$group> which results in a new sequence.

=head3 contains-letters($number, $letters)

A test that returns true if the words for C<$number> (e.g. "one thousand
four hundred five") contain the given C<$letters>.

=head3 spiral-board(Int $size, Bool :$flip, Int :$rotate=0)

Returns a list of lists containing a spiral numbering sequence starting
from the geometric middle of the square and spiraling out to fill it.
This is used by C<@A316667>. The optional flip and rotate parameters can
be used to modify the orientation of the resulting board.

=head1 SUPPORT ROUTINES

These routines and operators are defined to support the definition
of the sequences. Because they're not the primary focus of this
library, they may be moved out into some extrnal library in the
future...

=head2 Integer support routines

To gain access to these, use:

=begin code :lang<raku>

use Math::Sequences::Integer :support;

=end code

=head3 $a choose $b

(binomial) The choose and ichoose (for integer-only results) infix
operators return the binomial coefficient on the inputs.

=head3 binpart($n)

The binary partitions of n.

=head3 Entringer($n, $k)

Alternating permutation (or zigzag permutation) of the set 1 through n,
taken k at a time, where each is an arrangement that is alternately
greater or less than the preceding.

=head3 Eulers-number($terms)

Returns digits of e to terms places after the decimal as a FatRat.

=head3 factorial($n)

The factorial of n.

=head3 factors($n, :%map)

The prime factors (non-unique) of n. Takes an optional map of
inputs to results, mostly used to deal with the ambiguous factors
of 0 and 1.

=head3 divisors($n)

The unique list of whole divisors of n. e.g. C<divisors(6)> gives
C<(1, 2, 3, 6)>.

=head3 moebius($n)

The M√∂bius number of n.

=head3 sigma($n, $exponent=1)

The sum of positive divisors function œÉ. The optional exponent is
the power to which each divisor is raised before summing.

=head3 Sterling1($n, $k)

Count permutations according to their number of cycles.

=head3 Sterling2($n, $k)

The number of ways to partition a set of n objects into k non-empty
subsets.

=head3 totient($n)

The numbers from zero to n that are co-prime to n.

=head3 planar-partitions($n)

The planar partitions of n. See:
L<https://mathworld.wolfram.com/PlanePartition.html>.

=head3 strict-partitions($n)

The strict partitions of _n_ are the ways that _n_ can be generated by
summing unique positive, non-zero integers. See:
L<https://math.stackexchange.com/questions/867760/what-is-the-count-of-the-strict-partitions-of-n-in-k-parts-not-exceeding-m>

=head3 Pi-digits

A generator of digits for pi. Relatively fast and very memory-efficient.

=head3 FatPi($digits=100)

This function is certainly going to be moved out of this library at some
point, as it is not used here and doesn't return an integer, but it's
a simple wrapper around Pi-digits which returns a C<FatRat> rational
for pi to the given number of digits. e.g. C<FatPi(17).nude> gives:
C<(7853981633974483 2500000000000000)>.

=head1 ABOUT UNICODE

This library uses a few non-ASCII Unicode characters that are widely used
within the mathematical community. They are entirely optional, however, and
if you wish to use their ASCII equivalents this table will help you out:

(the following assume C<use Math::Sequences::Integer; use Math::Sequences::Real;>.

=item ‚Ñ§ - Integers.new
=item ùïÄ - Naturals.new.from(0) or simply Naturals.new
=item ‚Ñï - Naturals.new.from(1)
=item ‚Ñù - Reals.new

The following, respectively, are defined 'ASCII equivalent' constants
for each of the above:

=item Z
=item I
=item N
=item R

=head2 Entering symbols

To enter each of these Unicode symbols, here are common shortcuts in
vim and emacs:

=head2 ‚Ñ§ - DOUBLE-STRUCK CAPITAL Z - U+2124

=item vim - Ctrl-v u 2 1 2 4
=item emacs - Ctrl-x 8 C<<enter>> 2 1 2 4 C<<enter>>

=head2 ùïÄ - MATHEMATICAL DOUBLE-STRUCK CAPITAL I - U+1D540

=item vim - Ctrl-v U 0 0 0 1 d 5 4 0
=item emacs - Ctrl-x 8 C<<enter>> 1 d 5 4 0 C<<enter>>

=head2 ‚Ñï - DOUBLE-STRUCK CAPITAL N - U+2115

=item vim - Ctrl-v u 2 1 1 5
=item emacs - Ctrl-x 8 C<<enter>> 2 1 1 5 C<<enter>>

=head2 ‚Ñù - DOUBLE-STRUCK CAPITAL R - U+211D

=item vim - Ctrl-v u 2 1 1 d
=item emacs - Ctrl-x 8 C<<enter>> 2 1 1 d C<<enter>>

=head1 EXAMPLES

See the L<examples|./examples> directory for usage.

=head1 AUTHORS

=item Aaron Sherman
=item JJ Merelo

=head1 COPYRIGHT AND LICENSE

Copyright 2016 - 2019 Aaron Sherman

Copyright 2024 Raku Community

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
